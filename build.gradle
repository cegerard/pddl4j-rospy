/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'magma' at '05/07/17 15:24' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
import java.io.File;
import java.io.FileNotFoundException;
import java.lang.Object;
group 'fr.uga'
version '1.0'
sourceCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    maven { url "https://jitpack.io" }
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.apache.logging.log4j:log4j-api:2.5'
    compile 'org.apache.logging.log4j:log4j-core:2.5'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile("com.github.pellierd:pddl4j:v3.5.0")
}
project.ext{
    current_dir = ""
    parent_dir = ""

}

task build(type: Jar) {
    doFirst { 
    assert file("./src/examples/testPlannerNodeAsync.py").exists()
    assert file("./src/examples/testPlannerNodeSync.py").exists()
    }
	manifest {
        attributes 'Implementation-Title': 'Jar File Example',
        	'Implementation-Version': version,
        	'Main-Class': 'PlannerHSP'
    }
    baseName = 'core-pddl4j'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    setVariable()
    testIfPddl4jIsInstalled()
    editConfigFile()
}


def testIfPddl4jIsInstalled() {
    ProcessBuilder builder = new ProcessBuilder("locate", "*pddl6j-[3-9].[0-9].[0.9].jar");
    builder.redirectErrorStream(true);
    Process p = builder.start();
    BufferedReader r = new BufferedReader(new InputStreamReader(p.getInputStream()));
    String line;
    List<String> list = new ArrayList<String>();
    while (true) {
        line = r.readLine();
        if (line == null) {
            break;
        }
        list.add(line);
        System.out.println(line);
    }
    if (list.size() == 0){
        System.out.println("pddl4j isn't installed on your machine.")
        clonePDDL4JFromGit()
        buildPDDL4J()
    }
    else {
        System.out.println("You have " + list.size() + " version(s) of the pddl4J library installed on your machine ")
        for (int i=0;i<list.size();i++){
            System.out.println((i+1) + ") Element " + list.get(i));
        }
    }
    
}


def setVariable(){
    project.ext.set("current_dir", System.getProperty("user.dir"))
    File parent_file = new File("..")
    project.ext.set("parent_dir", parent_file.getCanonicalPath().toString())

}
def clonePDDL4JFromGit(){
    File parent_file = new File("..")
    System.out.println(">> Downloading the library from https://github.com/pellierd/pddl4j into the ~/pddl4j/ directory...")
    String command = "git clone https://github.com/pellierd/pddl4j " + parent_file.getCanonicalPath().toString() + "/pddl4j"
    System.out.println("Voici la commande GIT : " + command)
    Process p = Runtime.getRuntime().exec(command)
}

def buildPDDL4J(){
    System.out.println(">> Building the library at ~/pddl4j...")
    String current_dir = System.getProperty("user.dir")
    File parent_file = new File("..")
    String parent_dir = parent_file.getCanonicalPath().toString()
    String command = parent_dir + "/pddl4j/gradlew build -p " + parent_dir + "/pddl4j"
    System.out.println("Voici la commande BUILD : " + command)
    System.setProperty("user.dir",parent_dir)
    Process p = Runtime.getRuntime().exec(command)
    BufferedReader output = new BufferedReader(new InputStreamReader(p.getInputStream()))
    BufferedReader error = new BufferedReader(new InputStreamReader(p.getErrorStream()))
    String ligne = "";
    while ((ligne = output.readLine()) != null) {
        System.out.println(ligne);
    }
    while ((ligne = error.readLine()) != null) {
        System.out.println(ligne);
    }
}

def editConfigFile(){
    System.out.println(">> Configuring the Planner...")
    PrintWriter writer = new PrintWriter("config/pddl4j_rospy_config.cfg", "UTF-8")
    Console console = System.console();
    String[] pathPerRep = project.current_dir.split("/")
    String[] catkinPathArray = Arrays.copyOf(pathPerRep, pathPerRep.length-2)
    String catkinpath = String.join("/", catkinPathArray);
    String input = console.readLine("\nEnter your catkin workspace (by default " + catkinpath + "/ ) :");
    writer.println("[options]");
    writer.println("plannerpath = " + System.getProperty("user.dir")  + "/");
    if (input.isEmpty()){
        writer.println("catkinpath = " + catkinpath + "/");
    }else{
        writer.println("catkinpath = " + input + "/");
    }
    writer.println("exempledirectory = " + project.current_dir + "/pddl/");
    writer.println("jsonpath = " + project.current_dir + "/data/plan.json");
    writer.println("pddl4jjarpath = " + project.current_dir + "/build/libs/core-pddl4j-1.0.jar");
    writer.close()
}
